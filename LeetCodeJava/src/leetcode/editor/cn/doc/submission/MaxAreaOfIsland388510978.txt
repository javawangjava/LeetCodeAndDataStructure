class Solution {

	// 其实图是节点和边的集合，因此需要找出图的节点和边。这个题目关注的是地图中的岛屿，也就是矩阵中的1。
	// 矩阵中的每个值为1的格子都是图中的一个节点。矩阵中的一个格子可能与位于它上、下、左、右的4个格子相邻，两个相邻的值为1的格子之间有一条边相连。
	// 一个图可能包含若干互不连通的子图，但子图内的所有节点相互连通。
	// 将岛屿转换成图之后，岛屿的面积就变成子图中节点的数目。如果能计算出每个连通子图中节点的数目，就能知道最大的岛屿的面积。
	// 可以逐一扫描矩阵中的每个格子，如果遇到一个值为1的格子并且它不在之前已知的岛屿上，那么就到达了一个新的岛屿，于是搜索这个岛屿并计算它的面积。
	// 在比较所有岛屿的面积之后就可以知道最大的岛屿的面积。
	
    public int maxAreaOfIsland(int[][] grid) {
		if(grid==null||grid.length==0){
			return 0;
		}
		int rowLen=grid.length;
		int colLen=grid[0].length;
		boolean[][] isVisited=new boolean[rowLen][colLen];
		int maxArea=0;

		for (int i = 0; i < rowLen; i++) {
			for (int j = 0; j < colLen; j++) {
				if(grid[i][j]==1&&!isVisited[i][j]){
					int area=getArea(grid,isVisited,i,j);
					maxArea=Math.max(maxArea,area);
				}
			}
		}
		return maxArea;
    }


	private int getArea(int[][] grid,boolean[][] isVisited,int i,int j){
		Queue<int[]> queue=new LinkedList<>();
		queue.add(new int[]{i,j});
		isVisited[i][j]=true;

		int[][] dirs={{-1,0},{1,0},{0,-1},{0,1}};
		int area=0;
		while(!queue.isEmpty()){
			int[] pos=queue.remove();
			area++;
			for (int[] dir:dirs) {
				int row=pos[0]+dir[0];
				int col=pos[1]+dir[1];
				if(row>=0&&row<grid.length&&col>=0&&col<grid[0].length&&grid[row][col]==1&&!isVisited[row][col]){
					queue.add(new int[]{row,col});
					isVisited[row][col]=true;
				}
			}
		}
		return area;
	}


}

//runtime:3 ms
//memory:41.9 MB
